############################################################################
# arch/loongarch/src/common/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

ifeq ($(CONFIG_BUILD_KERNEL),y)
STARTUP_OBJS = crt0$(OBJEXT)
endif

# Specify our general Assembly files
CMN_ASRCS += loongarch_vectors.S loongarch_exception_common.S loongarch_mhartid.S

# Specify C code within the common directory to be included
CMN_CSRCS += loongarch_initialize.c loongarch_swint.c loongarch_timer.c
CMN_CSRCS += loongarch_allocateheap.c loongarch_createstack.c loongarch_exit.c
CMN_CSRCS += loongarch_assert.c loongarch_copystate.c loongarch_initialstate.c
CMN_CSRCS += loongarch_modifyreg.c loongarch_nputs.c
CMN_CSRCS += loongarch_releasepending.c
CMN_CSRCS += loongarch_releasestack.c loongarch_stackframe.c loongarch_schedulesigaction.c
CMN_CSRCS += loongarch_sigdeliver.c loongarch_switchcontext.c loongarch_usestack.c
CMN_CSRCS += loongarch_idle.c loongarch_tcbinfo.c loongarch_cpuidlestack.c
CMN_CSRCS += loongarch_exception.c loongarch_getnewintctx.c loongarch_doirq.c
CMN_CSRCS += loongarch_saveusercontext.c

ifneq ($(CONFIG_ALARM_ARCH),y)
  ifneq ($(CONFIG_TIMER_ARCH),y)
    CMN_CSRCS += riscv_mdelay.c riscv_udelay.c
  endif
endif

ifeq ($(CONFIG_SMP),y)
CMN_CSRCS += riscv_cpuindex.c riscv_cpupause.c riscv_cpustart.c
endif

ifeq ($(CONFIG_RISCV_MISALIGNED_HANDLER),y)
CMN_CSRCS += riscv_misaligned.c
endif

ifneq ($(CONFIG_BUILD_FLAT),y)
CMN_CSRCS  += riscv_task_start.c
CMN_CSRCS  += riscv_pthread_start.c
CMN_CSRCS  += riscv_signal_dispatch.c
CMN_UASRCS += riscv_signal_handler.S
endif

ifeq ($(CONFIG_SCHED_BACKTRACE),y)
CMN_CSRCS += riscv_backtrace.c
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
CMN_CSRCS += loongarch_checkstack.c
endif

ifeq ($(CONFIG_ARCH_HAVE_VFORK),y)
CMN_ASRCS += vfork.S
CMN_CSRCS += loongarch_vfork.c
endif

ifeq ($(CONFIG_SCHED_THREAD_LOCAL),y)
CMN_CSRCS += riscv_tls.c
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += riscv_fpu.S
CMN_CSRCS += riscv_fpucmp.c
endif

ifeq ($(CONFIG_ARCH_RV_ISA_A),y)
CMN_ASRCS += riscv_testset.S
endif

ifeq ($(CONFIG_LOONGARCH_SEMIHOSTING_HOSTFS),y)
CMN_ASRCS += loongarch_semihost.S
CMN_CSRCS += loongarch_hostfs.c
endif

ifeq ($(CONFIG_ARCH_USE_MPU),y)
CMN_CSRCS += riscv_pmp.c
endif

ifeq ($(CONFIG_ARCH_USE_MMU),y)
CMN_CSRCS += riscv_mmu.c
endif

ifeq ($(CONFIG_ARCH_KERNEL_STACK),y)
CMN_CSRCS += riscv_addrenv_kstack.c
endif

ifeq ($(CONFIG_ARCH_ADDRENV),y)
CMN_CSRCS += riscv_addrenv.c riscv_pgalloc.c riscv_addrenv_perms.c
CMN_CSRCS += riscv_addrenv_utils.c riscv_addrenv_shm.c
endif
